// preliminaries, random small character utilities
WHITESPACE = _{ " " | "\n" }
non_single_quote = _{ !"'" ~ ANY }
string_literal_contents = { ("\\'" | non_single_quote)+ }
alphanum_or_underscore = { (ASCII_ALPHANUMERIC | "_") }

// atoms, an identifier doesn't start with a number, and then is alphanumeric +
// _. a literal is either a number or a string in single quotes

identifier = @{ ASCII_ALPHA ~ alphanum_or_underscore* }
literal = { number_literal | string_literal }
  number_literal = { ASCII_DIGIT+ }
  string_literal = { "'" ~ string_literal_contents ~ "'" }

// allow for aliasing a table

table_identifier = { identifier ~ ("as" ~ identifier)? }

// naming a column might require putting table alias and a dot first
column = { identifier | "*" }
column_identifier = { (identifier ~ "." ~ column) | column }

// the entry symbol, queries, a list of queries. a query must be terminated by
// a ;

queries = { query* }
query = { (select_query | insert_query | create_table_query) ~ ";" }

// select queries, get data from the database

select_query = { "select" ~ column_list ~ "from" ~ table_expression ~ where_clause? }
column_list = { ( column_identifier ~ ("," ~ column_identifier)* ) | "*" }
identifier_list = { identifier ~ ("," ~ identifier)* }

// table expressions have a root table then a series of joins, with joins
// specifying the condition to join on

table_expression = { table_identifier ~ join_clause* }
join_clause = { "join" ~ table_identifier ~ "on" ~ join_filter }
join_filter = { column_identifier ~ "=" ~ column_identifier }

// where clauses filter rows out of a select query
// evaluate the expression, and keep the row if it's true

where_clause = { "where" ~ expression }

// insert queries, insert a single row into the database with a list of literal
// values.

insert_query = {
  "insert" ~ "into" ~ identifier ~ "(" ~ identifier_list ~ ")" ~ "values" ~ "(" ~ literal_list ~ ")"
}
literal_list = { literal ~ ("," ~ literal)* }

// create table queries, name a table with an identifier, then pass a list of
// columns to use as the table description.

create_table_query = { "create" ~ "table" ~ identifier ~ "(" ~ create_table_column_list ~ ")"}
create_table_column_list = { create_table_column ~ ("," ~ create_table_column)* }
create_table_column = { identifier ~ datatype }
datatype = { "text" | "number" | "boolean" }

// work on actual expressions
// handle precedence with a PrecClimber in code
expression = { atom ~ (op ~ atom)* }
atom = _{ ("(" ~ expression ~ ")") | column_identifier | literal }
op = _{ greater_equal | less_equal | greater | less | and | or | equal }
  greater_equal = { ">=" }
  less_equal = { "<=" }
  greater = { ">" }
  less = { "<" }
  and = { "and" }
  or = { "or" }
  equal = { "=" }
