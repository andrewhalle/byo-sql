// preliminaries, random small character utilities
WHITESPACE = _{ " " | "\n" }
non_single_quote = _{ !"'" ~ ANY }
string_literal_contents = { ("\\'" | non_single_quote)* }
alphanum_or_underscore = { (ASCII_ALPHANUMERIC | "_") }

// atoms, an identifier doesn't start with a number, and then is alphanumeric +
// _. a literal is either a number or a string in single quotes

identifier = @{ ASCII_ALPHA ~ alphanum_or_underscore* }
literal = { number_literal | string_literal | boolean_literal }
  number_literal = { ASCII_DIGIT+ }
  string_literal = { "'" ~ string_literal_contents ~ "'" }
  boolean_literal = { "true" | "false" }

// allow for aliasing a table

table_identifier = { identifier ~ ("as" ~ identifier)? }

// naming a column might require putting table alias and a dot first
column = { identifier | "*" }
column_identifier = { (identifier ~ "." ~ column) | column }

// the entry symbol, queries, a list of queries. a query must be terminated by
// a ;

queries = { query+ }
query = { (select_query | insert_query | create_table_query | update_query) ~ ";" }

// select queries, get data from the database

select_query = {
  "select"~ expression_list
    ~ "from" ~ table_expression
    ~ where_clause?
    ~ order_by_clause?
    ~ limit_clause?
}

expression_list = { expression ~ ("," ~ expression)* }
identifier_list = { identifier ~ ("," ~ identifier)* }

// table expressions have a root table then a series of joins, with joins
// specifying the condition to join on

table_expression = { table_identifier ~ join_clause* }
join_clause = { join_type ~ table_identifier ~ "on" ~ expression }
join_type = { inner_join | left_join | right_join }
  inner_join = { ("inner" ~ "join") | "join" }
  left_join = { "left" ~ "join" }
  right_join = { "right" ~ "join" }

// where clauses filter rows out of a select query
// evaluate the expression, and keep the row if it's true

where_clause = { "where" ~ expression }

// order by clauses order the result

order_by_clause = { "order" ~ "by" ~ expression ~ direction? }
direction = { "asc" | "desc" }

limit_clause = { "limit" ~ expression }

// insert queries, insert a single row into the database with a list of literal
// values.

insert_query = {
  "insert" ~ "into" ~ identifier ~ "(" ~ identifier_list ~ ")" ~ "values" ~ "(" ~ literal_list ~ ")"
}
literal_list = { literal ~ ("," ~ literal)* }

// create table queries, name a table with an identifier, then pass a list of
// columns to use as the table description.

create_table_query = { "create" ~ "table" ~ identifier ~ "(" ~ create_table_column_list ~ ")"}
create_table_column_list = { create_table_column ~ ("," ~ create_table_column)* }
create_table_column = { identifier ~ datatype }
datatype = { "text" | "number" | "boolean" }

// work on actual expressions
// handle precedence with a PrecClimber in code
expression = { atom ~ (op ~ atom)* }
atom = _{ count_star | ("(" ~ expression ~ ")") | literal | column_identifier }
op = _{ greater_equal | less_equal | greater | less | and | or | equal | plus | minus }
  greater_equal = { ">=" }
  less_equal = { "<=" }
  greater = { ">" }
  less = { "<" }
  // and and or are possible prefixes to other words, so they better be followed by whitespace
  and = @{ "and" ~ WHITESPACE }
  or = @{ "or" ~ WHITESPACE }
  equal = { "=" }
  plus = { "+" }
  minus = { "-" }
count_star = { "count(*)" }

update_query = { "update" ~ identifier ~ "set" ~ assignment_list ~ where_clause }
assignment_list = { assignment ~ ("," ~ assignment)* }
assignment = { identifier ~ "=" ~ literal }
